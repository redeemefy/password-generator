{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction AppComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"label\", 16);\n    i0.ɵɵtext(3, \" Your Password \");\n    i0.ɵɵelement(4, \"input\", 17);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", ctx_r0.password);\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.password = '';\n    this.passwordLength = 0;\n    this.includeLetters = false;\n    this.includeNumbers = false;\n    this.includeSymbols = false;\n  }\n  disabledBth() {\n    return !(this.passwordLength !== 0 && (this.includeLetters || this.includeNumbers || this.includeSymbols));\n  }\n  onChangeLength(value) {\n    const parsedValue = parseInt(value);\n    if (!isNaN(parsedValue)) {\n      this.passwordLength = parsedValue;\n    }\n  }\n  onChangeUseLetters() {\n    this.includeLetters = !this.includeLetters;\n  }\n  onChangeUseNumbers() {\n    this.includeNumbers = !this.includeNumbers;\n  }\n  onChangeUseSymbols() {\n    this.includeSymbols = !this.includeSymbols;\n  }\n  generatePassword() {\n    const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const numbers = '0123456789';\n    const symbols = '!@#$%^&*()_-,.';\n    let availableCharacters = '';\n    if (this.includeLetters) {\n      availableCharacters += lowerCaseLetters;\n      availableCharacters += upperCaseLetters;\n    }\n    if (this.includeNumbers) {\n      availableCharacters += numbers;\n    }\n    if (this.includeSymbols) {\n      availableCharacters += symbols;\n    }\n    availableCharacters.split('');\n    const generatedPassword = [];\n    for (let i = 0; i < this.passwordLength; i += 1) {\n      const max = availableCharacters.length;\n      const ran = Math.random();\n      const idx = Math.floor(ran * (max + 1));\n      generatedPassword.push(availableCharacters[idx]);\n    }\n    this.password = generatedPassword.join('');\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 31,\n  vars: 2,\n  consts: [[1, \"columns\", 2, \"margin-top\", \"2rem\"], [1, \"column\", \"is-half\", \"is-offset-one-quarter\"], [1, \"box\"], [1, \"title\"], [1, \"field\"], [1, \"control\"], [\"for\", \"length\"], [\"type\", \"text\", \"name\", \"length\", 1, \"input\", 3, \"input\"], [\"for\", \"use-letters\", 1, \"checkbox\"], [\"type\", \"checkbox\", \"id\", \"use-letters\", 1, \"form-check-input\", 3, \"change\"], [\"for\", \"use-numbers\", 1, \"checkbox\"], [\"type\", \"checkbox\", \"id\", \"use-numbers\", 1, \"form-check-input\", 3, \"change\"], [\"for\", \"use-symbols\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"use-symbols\", 1, \"form-check-input\", 3, \"change\"], [1, \"button\", \"is-success\", \"is-fullwidth\", 3, \"disabled\", \"click\"], [\"class\", \"field\", 4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"text\", \"name\", \"password\", 1, \"input\", 3, \"value\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \"Password Generator\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"hr\");\n      i0.ɵɵelementStart(6, \"div\", 4)(7, \"div\", 5)(8, \"label\", 6);\n      i0.ɵɵtext(9, \"Length\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 7);\n      i0.ɵɵlistener(\"input\", function AppComponent_Template_input_input_10_listener($event) {\n        return ctx.onChangeLength($event.target.value);\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(11, \"div\", 4)(12, \"div\", 5)(13, \"label\", 8)(14, \"input\", 9);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_14_listener() {\n        return ctx.onChangeUseLetters();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \" Use letters \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(16, \"div\", 4)(17, \"div\", 5)(18, \"label\", 10)(19, \"input\", 11);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_19_listener() {\n        return ctx.onChangeUseNumbers();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(20, \" Use numbers \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(21, \"div\", 4)(22, \"div\", 5)(23, \"label\", 12)(24, \"input\", 13);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_24_listener() {\n        return ctx.onChangeUseSymbols();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(25, \" Use symbols \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(26, \"div\", 4)(27, \"div\", 5)(28, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_28_listener() {\n        return ctx.generatePassword();\n      });\n      i0.ɵɵtext(29, \"Generate\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(30, AppComponent_div_30_Template, 5, 1, \"div\", 15);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(28);\n      i0.ɵɵproperty(\"disabled\", ctx.disabledBth());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.password);\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AppComponent","constructor","disabledBth","passwordLength","includeLetters","includeNumbers","includeSymbols","onChangeLength","value","parsedValue","parseInt","isNaN","onChangeUseLetters","onChangeUseNumbers","onChangeUseSymbols","generatePassword","lowerCaseLetters","upperCaseLetters","numbers","symbols","availableCharacters","split","generatedPassword","i","max","length","ran","Math","random","idx","floor","push","password","join","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/gilbertodiaz/workspace/password-generator/src/app/app.component.html","/Users/gilbertodiaz/workspace/password-generator/src/app/app.component.ts"],"sourcesContent":["<div class=\"columns\" style=\"margin-top: 2rem;\">\n  <div class=\"column is-half is-offset-one-quarter\">\n    <div class=\"box\">\n      <h1 class=\"title\">Password Generator</h1>\n      <hr>\n\n      <div class=\"field\">\n        <div class=\"control\">\n          <label for=\"length\">Length</label>\n          <input (input)=\"onChangeLength($event.target.value)\" type=\"text\" name=\"length\" class=\"input\">\n        </div>\n      </div>\n\n      <div class=\"field\">\n        <div class=\"control\">\n          <label class=\"checkbox\" for=\"use-letters\">\n            <input (change)=\"onChangeUseLetters()\" type=\"checkbox\" class=\"form-check-input\" id=\"use-letters\">\n            Use letters\n          </label>\n        </div>\n      </div>\n\n      <div class=\"field\">\n        <div class=\"control\">\n          <label class=\"checkbox\" for=\"use-numbers\">\n            <input (change)=\"onChangeUseNumbers()\" type=\"checkbox\" class=\"form-check-input\" id=\"use-numbers\">\n            Use numbers\n          </label>\n        </div>\n      </div>\n\n      <div class=\"field\">\n        <div class=\"control\">\n          <label class=\"form-check-label\" for=\"use-symbols\">\n            <input (change)=\"onChangeUseSymbols()\" type=\"checkbox\" class=\"form-check-input\" id=\"use-symbols\">\n            Use symbols\n          </label>\n        </div>\n      </div>\n\n      <div class=\"field\">\n        <div class=\"control\">\n          <button [disabled]=\"disabledBth()\" class=\"button is-success is-fullwidth\"\n            (click)=\"generatePassword()\">Generate</button>\n        </div>\n      </div>\n\n      <div class=\"field\" *ngIf=\"password\">\n        <div class=\"control\">\n          <label for=\"password\">\n            Your Password\n            <input type=\"text\" name=\"password\" class=\"input\" [value]=\"password\">\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  password = ''\n  passwordLength = 0\n  includeLetters = false\n  includeNumbers = false\n  includeSymbols = false\n\n  disabledBth() {\n    return !(this.passwordLength !== 0 && (this.includeLetters || this.includeNumbers || this.includeSymbols))\n  }\n  onChangeLength(value: string) {\n    const parsedValue = parseInt(value)\n\n    if (!isNaN(parsedValue)) {\n      this.passwordLength = parsedValue\n    }\n  }\n\n  onChangeUseLetters() {\n    this.includeLetters = !this.includeLetters\n  }\n\n  onChangeUseNumbers() {\n    this.includeNumbers = !this.includeNumbers\n  }\n\n  onChangeUseSymbols() {\n    this.includeSymbols = !this.includeSymbols\n  }\n\n  generatePassword() {\n    const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\n    const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const numbers = '0123456789'\n    const symbols = '!@#$%^&*()_-,.'\n\n    let availableCharacters = ''\n\n    if (this.includeLetters) {\n      availableCharacters += lowerCaseLetters\n      availableCharacters += upperCaseLetters\n    }\n\n    if (this.includeNumbers) {\n      availableCharacters += numbers\n    }\n\n    if (this.includeSymbols) {\n      availableCharacters += symbols\n    }\n\n    availableCharacters.split('')\n    const generatedPassword = []\n\n    for (let i = 0; i < this.passwordLength; i += 1) {\n      const max = availableCharacters.length\n      const ran = Math.random()\n      const idx = Math.floor(ran * (max + 1))\n\n      generatedPassword.push(availableCharacters[idx])\n\n    }\n\n    this.password = generatedPassword.join('')\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}